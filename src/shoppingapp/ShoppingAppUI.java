package shoppingapp;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class ShoppingAppUI extends javax.swing.JFrame {

    private ArrayList<User> users = new ArrayList<>();
    private ArrayList<Product> products = new ArrayList<>();
    private User currentUser = null;
    private DefaultListModel<String> productListModel = new DefaultListModel<>();


    /** Creates new form ShoppingAppUI */
    public ShoppingAppUI() {
        initComponents();
        // Add some sample products
        products.add(new Product("Laptop", "Black", "Electronics", 10, 2.5, "A powerful laptop"));
        products.add(new Product("Smartphone", "White", "Electronics", 20, 0.3, "Latest smartphone"));
        products.add(new Product("Headphones", "Red", "Audio", 15, 0.2, "Noise cancelling"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
           
        setTitle("Shopping App");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        
        JTabbedPane tabbedPane = new JTabbedPane();
        
        tabbedPane.addTab("Login/Register", createLoginPanel());
        tabbedPane.addTab("Products", createProductsPanel());
        tabbedPane.addTab("Cart", createCartPanel());
        tabbedPane.addTab("Orders",createAccountPanel());
        tabbedPane.addTab("Favorites", createFavoritesPanel());
        tabbedPane.addTab("Account", createAccountPanel());

        
        getContentPane().add(tabbedPane, BorderLayout.CENTER);
    }// </editor-fold>                        

    private JPanel createLoginPanel() {
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);

        // Login section
        JPanel loginPanel = new JPanel(new GridLayout(3, 2, 5, 5));
        loginPanel.setBorder(BorderFactory.createTitledBorder("Login"));

        loginPanel.add(new JLabel("Username:"));
        JTextField usernameField = new JTextField(15);
        loginPanel.add(usernameField);

        loginPanel.add(new JLabel("Password:"));
        JPasswordField passwordField = new JPasswordField(15);
        loginPanel.add(passwordField);

        loginPanel.add(new JLabel(""));
        JButton loginButton = new JButton("Login");
        loginButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            for (User user : users) {
                if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                    currentUser = user;
                    JOptionPane.showMessageDialog(this, "Login successful!");
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Invalid username or password");
        });
        loginPanel.add(loginButton);

        // Registration section
        JPanel registerPanel = new JPanel(new GridLayout(9, 2, 5, 5));
        registerPanel.setBorder(BorderFactory.createTitledBorder("Register"));

        registerPanel.add(new JLabel("Username:"));
        JTextField regUsernameField = new JTextField(15);
        registerPanel.add(regUsernameField);

        registerPanel.add(new JLabel("Name:"));
        JTextField nameField = new JTextField(15);
        registerPanel.add(nameField);

        registerPanel.add(new JLabel("Surname:"));
        JTextField surnameField = new JTextField(15);
        registerPanel.add(surnameField);

        registerPanel.add(new JLabel("Date of Birth:"));
        JTextField dobField = new JTextField(15);
        registerPanel.add(dobField);

        registerPanel.add(new JLabel("Password:"));
        JPasswordField regPasswordField = new JPasswordField(15);
        registerPanel.add(regPasswordField);

        registerPanel.add(new JLabel("Email:"));
        JTextField emailField = new JTextField(15);
        registerPanel.add(emailField);

        registerPanel.add(new JLabel("Home Address:"));
        JTextField homeAddressField = new JTextField(15);
        registerPanel.add(homeAddressField);

        registerPanel.add(new JLabel("Work Address:"));
        JTextField workAddressField = new JTextField(15);
        registerPanel.add(workAddressField);

        registerPanel.add(new JLabel(""));
        JButton registerButton = new JButton("Register");
        registerButton.addActionListener(e -> {
            User newUser = new User(
                regUsernameField.getText(),
                nameField.getText(),
                surnameField.getText(),
                dobField.getText(),
                new String(regPasswordField.getPassword()),
                emailField.getText(),
                homeAddressField.getText(),
                workAddressField.getText()
            );
            users.add(newUser);
            JOptionPane.showMessageDialog(this, "Registration successful! You can now login.");
        });
        registerPanel.add(registerButton);

        // Add panels to main panel
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel.add(loginPanel, gbc);

        gbc.gridy = 1;
        panel.add(registerPanel, gbc);

        return panel;
    }
    
    private JPanel createProductsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        
        // Product list
        JList<String> productList = new JList<>(productListModel);
        JScrollPane scrollPane = new JScrollPane(productList);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        // Initially populate the product list
        for (Product product : products) {
            productListModel.addElement(product.getProductName() + " - " + product.getProductDescription() +
                                       " - " + product.getProductCategory() + " - Stock: " + product.getProductStockInformation());
        }
        
        // Buttons panel
        JPanel buttonsPanel = new JPanel();
        
        JButton refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> {
            productListModel.clear();
            for (Product product : products) {
                productListModel.addElement(product.getProductName() + " - " + product.getProductDescription() +
                                           " - " + product.getProductCategory() + " - Stock: " + product.getProductStockInformation());
            }
        });
        buttonsPanel.add(refreshButton);
        
        JButton addToCartButton = new JButton("Add to Cart");
        addToCartButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(this, "Please login first");
                return;
            }

            int selectedIndex = productList.getSelectedIndex();
            if (selectedIndex >= 0 && selectedIndex < products.size()) {
                Product selectedProduct = products.get(selectedIndex);
                currentUser.order(selectedProduct);
                JOptionPane.showMessageDialog(this, "Product added to cart!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a product");
            }
        });
        buttonsPanel.add(addToCartButton);
        
        JButton addToFavoritesButton = new JButton("Add to Favorites");
        addToFavoritesButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(this, "Please login first");
                return;
            }
            
            int selectedIndex = productList.getSelectedIndex();
            if (selectedIndex >= 0 && selectedIndex < products.size()) {
                Product selectedProduct = products.get(selectedIndex);
                currentUser.favorite(selectedProduct);
            } else {
                JOptionPane.showMessageDialog(this, "Please select a product");
            }
        });
        buttonsPanel.add(addToFavoritesButton);
        
        panel.add(buttonsPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    private JPanel createCartPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        
        DefaultListModel<String> cartListModel = new DefaultListModel<>();
        JList<String> cartList = new JList<>(cartListModel);
        JScrollPane scrollPane = new JScrollPane(cartList);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        JPanel buttonsPanel = new JPanel();
        
        JButton refreshButton = new JButton("Refresh Cart");
        refreshButton.addActionListener(e -> {
            cartListModel.clear();
            if (currentUser != null) {
                for (Product product : currentUser.getOrderedProducts()) {
                    cartListModel.addElement(product.getProductName() + " - " + product.getProductDescription());
                }
            }
        });
        buttonsPanel.add(refreshButton);
        
        JButton checkoutButton = new JButton("Checkout");
        checkoutButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(this, "Please login first");
                return;
            }

            if (currentUser.getOrderedProducts().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Your cart is empty");
                return;
            }

            if (currentUser.getCreditCards().isEmpty()) {
                JOptionPane.showMessageDialog(this, "You can't order without adding a credit card. Please add a card.");
                return;
            }

            // Process each product in the cart
            for (Product product : currentUser.getOrderedProducts()) {
                // Decrease stock by 1 for each product
                product.order(1);
            }

            // Clear the cart after successful checkout
            currentUser.getOrderedProducts().clear();

            // Refresh the cart list
            cartListModel.clear();

            // Refresh the products list to show updated stock
            productListModel.clear();
            for (Product product : products) {
                productListModel.addElement(product.getProductName() + " - " + product.getProductDescription() +
                        " - " + product.getProductCategory() + " - Stock: " + product.getProductStockInformation());
            }

            JOptionPane.showMessageDialog(this, "Order placed successfully!");
        });
        buttonsPanel.add(checkoutButton);
        
        panel.add(buttonsPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    private JPanel createFavoritesPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        
        DefaultListModel<String> favoritesListModel = new DefaultListModel<>();
        JList<String> favoritesList = new JList<>(favoritesListModel);
        JScrollPane scrollPane = new JScrollPane(favoritesList);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        JButton refreshButton = new JButton("Refresh Favorites");
        refreshButton.addActionListener(e -> {
            favoritesListModel.clear();
            if (currentUser != null) {
                for (Product product : currentUser.getFavoriteProducts()) {
                    favoritesListModel.addElement(product.getProductName() + " - " + product.getProductDescription());
                }
            }
        });
        
        panel.add(refreshButton, BorderLayout.SOUTH);
        
        return panel;
    }

    private JPanel createAccountPanel() {
        JPanel panel = new JPanel(new BorderLayout());

        // User info panel
        JPanel userInfoPanel = new JPanel(new GridLayout(0, 2, 5, 5));
        userInfoPanel.setBorder(BorderFactory.createTitledBorder("User Information"));

        JLabel usernameLabel = new JLabel("Username: ");
        JLabel usernameValue = new JLabel();
        userInfoPanel.add(usernameLabel);
        userInfoPanel.add(usernameValue);

        JLabel nameLabel = new JLabel("Name: ");
        JLabel nameValue = new JLabel();
        userInfoPanel.add(nameLabel);
        userInfoPanel.add(nameValue);

        JLabel emailLabel = new JLabel("Email: ");
        JLabel emailValue = new JLabel();
        userInfoPanel.add(emailLabel);
        userInfoPanel.add(emailValue);

        JButton refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> {
            if (currentUser != null) {
                usernameValue.setText(currentUser.getUsername());
                nameValue.setText(currentUser.getName() + " " + currentUser.getSurname());
                emailValue.setText(currentUser.getEmailAddress());
            } else {
                usernameValue.setText("Not logged in");
                nameValue.setText("");
                emailValue.setText("");
            }
        });

        // Credit card panel
        JPanel creditCardPanel = new JPanel(new GridLayout(2, 1, 5, 5));
        creditCardPanel.setBorder(BorderFactory.createTitledBorder("Add Credit Card"));

        JButton addCardButton = new JButton("Add Credit Card");
        addCardButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(panel, "Please login first");
                return;
            }

            CreditCard card = new CreditCard(currentUser);
            currentUser.getCreditCards().add(card);
            JOptionPane.showMessageDialog(panel,
                    "Credit card added successfully!\nCard number: " + card.getCardNumber() +
                            "\nExpiry: " + card.getExpirationDate() +
                            "\nCVV: " + card.getSecurityCode() +
                            "\nCardholder: " + card.getCardholderName());
        });
        creditCardPanel.add(addCardButton);

        // Add panels
        panel.add(userInfoPanel, BorderLayout.NORTH);
        panel.add(creditCardPanel, BorderLayout.CENTER);
        panel.add(refreshButton, BorderLayout.SOUTH);

        return panel;
    }
    
    private JPanel createOrdersPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        
        DefaultListModel<String> ordersListModel = new DefaultListModel<>();
        JList<String> ordersList = new JList<>(ordersListModel);
        JScrollPane scrollPane = new JScrollPane(ordersList);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        JButton refreshButton = new JButton("Refresh Favorites");
        refreshButton.addActionListener(e -> {
            ordersListModel.clear();
            if (currentUser != null) {
                for (Product product : currentUser.getFavoriteProducts()) {
                    ordersListModel.addElement(product.getProductName() + " - " + product.getProductDescription());
                }
            }
        });
        
        panel.add(refreshButton, BorderLayout.SOUTH);
        
        return panel;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(ShoppingAppUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShoppingAppUI().setVisible(true);
            }
        });
    }
}