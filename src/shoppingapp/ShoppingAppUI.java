package shoppingapp;
/**
 *
 * @author ozgunkasapoglu
 */
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class ShoppingAppUI extends javax.swing.JFrame {

    private ArrayList<User> users = new ArrayList<>();
    private ArrayList<Product> products = new ArrayList<>();
    private User currentUser = null;
    private DefaultListModel<String> productListModel = new DefaultListModel<>();
    private ArrayList<Order> completedOrders = new ArrayList<>();


    /** Creates new form ShoppingAppUI */
    public ShoppingAppUI() {
        initComponents();
        products.add(new Product("Laptop", "Black", "Electronics", 10, 2.5, "A powerful laptop"));
        products.add(new Product("Smartphone", "White", "Electronics", 20, 0.3, "Latest smartphone"));
        products.add(new Product("Headphones", "Red", "Audio", 15, 0.2, "Noise cancelling"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
           
        setTitle("Shopping App");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        
        JTabbedPane tabbedPane = new JTabbedPane();
        
        tabbedPane.addTab("Login/Register", createLoginPanel());
        tabbedPane.addTab("Products", createProductsPanel());
        tabbedPane.addTab("Cart", createCartPanel());
        tabbedPane.addTab("Orders",createOrdersPanel());
        tabbedPane.addTab("Favorites", createFavoritesPanel());
        tabbedPane.addTab("Account", createAccountPanel());

        
        getContentPane().add(tabbedPane, BorderLayout.CENTER);
    }// </editor-fold>                        

    private JPanel createLoginPanel() {
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);

        JPanel loginPanel = new JPanel(new GridLayout(3, 2, 5, 5));
        loginPanel.setBorder(BorderFactory.createTitledBorder("Login"));

        loginPanel.add(new JLabel("Username:"));
        JTextField usernameField = new JTextField(15);
        loginPanel.add(usernameField);

        loginPanel.add(new JLabel("Password:"));
        JPasswordField passwordField = new JPasswordField(15);
        loginPanel.add(passwordField);

        loginPanel.add(new JLabel(""));
        JButton loginButton = new JButton("Login");
        loginButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            for (User user : users) {
                if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                    currentUser = user;
                    JOptionPane.showMessageDialog(this, "Login successful!");
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Invalid username or password");
        });
        loginPanel.add(loginButton);

        JPanel registerPanel = new JPanel(new GridLayout(9, 2, 5, 5));
        registerPanel.setBorder(BorderFactory.createTitledBorder("Register"));

        registerPanel.add(new JLabel("Username:"));
        JTextField regUsernameField = new JTextField(15);
        registerPanel.add(regUsernameField);

        registerPanel.add(new JLabel("Name:"));
        JTextField nameField = new JTextField(15);
        registerPanel.add(nameField);

        registerPanel.add(new JLabel("Surname:"));
        JTextField surnameField = new JTextField(15);
        registerPanel.add(surnameField);

        registerPanel.add(new JLabel("Date of Birth:"));
        JTextField dobField = new JTextField(15);
        registerPanel.add(dobField);

        registerPanel.add(new JLabel("Password:"));
        JPasswordField regPasswordField = new JPasswordField(15);
        registerPanel.add(regPasswordField);

        registerPanel.add(new JLabel("Email:"));
        JTextField emailField = new JTextField(15);
        registerPanel.add(emailField);

        registerPanel.add(new JLabel("Home Address:"));
        JTextField homeAddressField = new JTextField(15);
        registerPanel.add(homeAddressField);

        registerPanel.add(new JLabel("Work Address:"));
        JTextField workAddressField = new JTextField(15);
        registerPanel.add(workAddressField);

        registerPanel.add(new JLabel(""));
        JButton registerButton = new JButton("Register");
        registerButton.addActionListener(e -> {
            User newUser = new User(
                regUsernameField.getText(),
                nameField.getText(),
                surnameField.getText(),
                dobField.getText(),
                new String(regPasswordField.getPassword()),
                emailField.getText(),
                homeAddressField.getText(),
                workAddressField.getText()
            );
            users.add(newUser);
            JOptionPane.showMessageDialog(this, "Registration successful! You can now login.");
        });
        registerPanel.add(registerButton);

        gbc.gridx = 0;
        gbc.gridy = 0;
        panel.add(loginPanel, gbc);

        gbc.gridy = 1;
        panel.add(registerPanel, gbc);

        return panel;
    }
    
    private JPanel createProductsPanel() {
        JPanel panel = new JPanel(new BorderLayout());

        JList<String> productList = new JList<>(productListModel);
        JScrollPane scrollPane = new JScrollPane(productList);
        panel.add(scrollPane, BorderLayout.CENTER);

        for (Product product : products) {
            productListModel.addElement(product.getProductName() + " - " + product.getProductDescription() +
                                       " - " + product.getProductCategory() + " - Stock: " + product.getProductStockInformation());
        }

        JPanel buttonsPanel = new JPanel();
        
        JButton refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> {
            productListModel.clear();
            for (Product product : products) {
                productListModel.addElement(product.getProductName() + " - " + product.getProductDescription() +
                                           " - " + product.getProductCategory() + " - Stock: " + product.getProductStockInformation());
            }
        });
        buttonsPanel.add(refreshButton);
        
        JButton addToCartButton = new JButton("Add to Cart");
        addToCartButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(this, "Please login first");
                return;
            }

            int selectedIndex = productList.getSelectedIndex();
            if (selectedIndex >= 0 && selectedIndex < products.size()) {
                Product selectedProduct = products.get(selectedIndex);
                currentUser.order(selectedProduct);
                JOptionPane.showMessageDialog(this, "Product added to cart!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a product");
            }
        });
        buttonsPanel.add(addToCartButton);
        
        JButton addToFavoritesButton = new JButton("Add to Favorites");
        addToFavoritesButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(this, "Please login first");
                return;
            }
            
            int selectedIndex = productList.getSelectedIndex();
            if (selectedIndex >= 0 && selectedIndex < products.size()) {
                Product selectedProduct = products.get(selectedIndex);
                currentUser.favorite(selectedProduct);
            } else {
                JOptionPane.showMessageDialog(this, "Please select a product");
            }
        });
        buttonsPanel.add(addToFavoritesButton);
        
        panel.add(buttonsPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    private JPanel createCartPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        
        DefaultListModel<String> cartListModel = new DefaultListModel<>();
        JList<String> cartList = new JList<>(cartListModel);
        JScrollPane scrollPane = new JScrollPane(cartList);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        JPanel buttonsPanel = new JPanel();
        
        JButton refreshButton = new JButton("Refresh Cart");
        refreshButton.addActionListener(e -> {
            cartListModel.clear();
            if (currentUser != null) {
                for (Product product : currentUser.getOrderedProducts()) {
                    cartListModel.addElement(product.getProductName() + " - " + product.getProductDescription());
                }
            }
        });
        buttonsPanel.add(refreshButton);
        
        JButton checkoutButton = new JButton("Checkout");
        checkoutButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(this, "Please login first");
                return;
            }

            if (currentUser.getOrderedProducts().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Your cart is empty");
                return;
            }

            if (currentUser.getCreditCards().isEmpty()) {
                JOptionPane.showMessageDialog(this, "You can't order without adding a credit card. Please add a card.");
                return;
            }

            CreditCard selectedCard = currentUser.getCreditCards().get(0);

            ArrayList<Product> productsToProcess = new ArrayList<>(currentUser.getOrderedProducts());

            currentUser.getOrderedProducts().clear();
            cartListModel.clear();

            for (Product product : productsToProcess) {
                product.setProductStockInformation(product.getProductStockInformation() - 1);

                Order order = new Order(currentUser, product, selectedCard);
                completedOrders.add(order);
            }

            productListModel.clear();
            for (Product product : products) {
                productListModel.addElement(product.getProductName() + " - " + product.getProductDescription() +
                        " - " + product.getProductCategory() + " - Stock: " + product.getProductStockInformation());
            }

            JOptionPane.showMessageDialog(this, "Order placed successfully!");
        });
        buttonsPanel.add(checkoutButton);


        JButton removeItemButton = new JButton("Remove Selected Item");
        removeItemButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(panel, "Please login first");
                return;
            }

            int selectedIndex = cartList.getSelectedIndex();
            if (selectedIndex >= 0 && selectedIndex < currentUser.getOrderedProducts().size()) {
                currentUser.getOrderedProducts().remove(selectedIndex);
                cartListModel.remove(selectedIndex);
                JOptionPane.showMessageDialog(panel, "Item removed from cart");
            } else {
                JOptionPane.showMessageDialog(panel, "Please select an item to remove");
            }
        });
        buttonsPanel.add(removeItemButton);

        JButton clearCartButton = new JButton("Clear Cart");
        clearCartButton.addActionListener(e -> {
            if (currentUser == null || currentUser.getOrderedProducts().isEmpty()) {
                JOptionPane.showMessageDialog(panel, "Cart is already empty");
                return;
            }

            int confirm = JOptionPane.showConfirmDialog(panel,
                    "Are you sure you want to clear your entire cart?",
                    "Confirm Clear Cart", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                currentUser.getOrderedProducts().clear();
                cartListModel.clear();
                JOptionPane.showMessageDialog(panel, "Cart cleared successfully");
            }
        });
        buttonsPanel.add(clearCartButton);

        panel.add(buttonsPanel, BorderLayout.SOUTH);
        
        return panel;
    }

    private JPanel createFavoritesPanel() {
        JPanel panel = new JPanel(new BorderLayout());

        DefaultListModel<String> favoritesListModel = new DefaultListModel<>();
        JList<String> favoritesList = new JList<>(favoritesListModel);
        JScrollPane scrollPane = new JScrollPane(favoritesList);
        panel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonsPanel = new JPanel();

        JButton refreshButton = new JButton("Refresh Favorites");
        refreshButton.addActionListener(e -> {
            favoritesListModel.clear();
            if (currentUser != null) {
                for (Product product : currentUser.getFavoriteProducts()) {
                    favoritesListModel.addElement(product.getProductName() + " - " + product.getProductDescription());
                }
            }
        });
        buttonsPanel.add(refreshButton);

        JButton removeButton = new JButton("Remove from Favorites");
        removeButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(panel, "Please login first");
                return;
            }

            int selectedIndex = favoritesList.getSelectedIndex();
            if (selectedIndex >= 0 && selectedIndex < currentUser.getFavoriteProducts().size()) {
                currentUser.getFavoriteProducts().remove(selectedIndex);
                favoritesListModel.remove(selectedIndex);
                JOptionPane.showMessageDialog(panel, "Item removed from favorites");
            } else {
                JOptionPane.showMessageDialog(panel, "Please select an item to remove");
            }
        });
        buttonsPanel.add(removeButton);

        panel.add(buttonsPanel, BorderLayout.SOUTH);

        return panel;
    }

    private JPanel createAccountPanel() {
        JPanel panel = new JPanel(new BorderLayout());

        JPanel userInfoPanel = new JPanel(new GridLayout(0, 2, 5, 5));
        userInfoPanel.setBorder(BorderFactory.createTitledBorder("User Information"));

        JLabel usernameLabel = new JLabel("Username: ");
        JLabel usernameValue = new JLabel();
        userInfoPanel.add(usernameLabel);
        userInfoPanel.add(usernameValue);

        JLabel nameLabel = new JLabel("Name: ");
        JLabel nameValue = new JLabel();
        userInfoPanel.add(nameLabel);
        userInfoPanel.add(nameValue);

        JLabel dbLabel = new JLabel("Date of Birth: ");
        JLabel dbValue = new JLabel();
        userInfoPanel.add(dbLabel);
        userInfoPanel.add(dbValue);

        JLabel emailLabel = new JLabel("Email: ");
        JLabel emailValue = new JLabel();
        userInfoPanel.add(emailLabel);
        userInfoPanel.add(emailValue);

        JLabel homeAddressLabel = new JLabel("Home Address: ");
        JLabel homeAddressValue = new JLabel();
        userInfoPanel.add(homeAddressLabel);
        userInfoPanel.add(homeAddressValue);

        JLabel workAddressLabel = new JLabel("Work Address: ");
        JLabel workAddressValue = new JLabel();
        userInfoPanel.add(workAddressLabel);
        userInfoPanel.add(workAddressValue);


        JPanel creditCardDisplayPanel = new JPanel(new BorderLayout());
        creditCardDisplayPanel.setBorder(BorderFactory.createTitledBorder("Your Credit Cards"));

        DefaultListModel<String> cardListModel = new DefaultListModel<>();
        JList<String> cardList = new JList<>(cardListModel);
        JScrollPane cardScrollPane = new JScrollPane(cardList);
        creditCardDisplayPanel.add(cardScrollPane, BorderLayout.CENTER);

        JPanel creditCardActionPanel = new JPanel(new FlowLayout());
        creditCardActionPanel.setBorder(BorderFactory.createTitledBorder("Credit Card Actions"));

        JButton addCardButton = new JButton("Add Random Credit Card");
        addCardButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(panel, "Please login first");
                return;
            }

            CreditCard card = new CreditCard(currentUser);
            currentUser.getCreditCards().add(card);

            cardListModel.addElement("Card Number: " + card.getFormattedCardNumber() +
                    " | Exp: " + card.getExpirationDate() +
                    " | CVV: " + card.getSecurityCode() +
                    " | Cardholder: " + card.getCardholderName());

            JOptionPane.showMessageDialog(panel,
                    "Credit card added successfully!\nCard number: " + card.getFormattedCardNumber() +
                            "\nExpiry: " + card.getExpirationDate() +
                            "\nCVV: " + card.getSecurityCode() +
                            "\nCardholder: " + card.getCardholderName());
        });
        creditCardActionPanel.add(addCardButton);

        JButton addManualCardButton = new JButton("Enter Card Manually");
        addManualCardButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(panel, "Please login first");
                return;
            }

            JPanel cardForm = new JPanel(new GridLayout(0, 2, 5, 5));

            JTextField cardNumberField = new JTextField(16);
            cardForm.add(new JLabel("Card Number:"));
            cardForm.add(cardNumberField);

            JTextField expiryField = new JTextField("MM/YY");
            cardForm.add(new JLabel("Expiry Date:"));
            cardForm.add(expiryField);

            JTextField cvvField = new JTextField(3);
            cardForm.add(new JLabel("CVV:"));
            cardForm.add(cvvField);

            JTextField nameField = new JTextField(currentUser.getName() + " " + currentUser.getSurname());
            cardForm.add(new JLabel("Cardholder Name:"));
            cardForm.add(nameField);

            JLabel noteLabel = new JLabel("Click Cancel to go back without adding a card");
            noteLabel.setFont(new Font(noteLabel.getFont().getName(), Font.ITALIC, noteLabel.getFont().getSize()));
            JPanel notePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
            notePanel.add(noteLabel);

            JPanel mainFormPanel = new JPanel(new BorderLayout());
            mainFormPanel.add(cardForm, BorderLayout.CENTER);
            mainFormPanel.add(notePanel, BorderLayout.SOUTH);

            int result = JOptionPane.showConfirmDialog(panel, mainFormPanel,
                    "Enter Card Details", JOptionPane.OK_CANCEL_OPTION);

            if (result == JOptionPane.OK_OPTION) {
                String cardNumber = cardNumberField.getText().trim();
                String expiry = expiryField.getText().trim();
                String cvv = cvvField.getText().trim();
                String name = nameField.getText().trim();

                if (cardNumber.isEmpty() || expiry.isEmpty() || cvv.isEmpty() || name.isEmpty() || expiry.equals("MM/YY")) {
                    JOptionPane.showMessageDialog(panel, "All fields are required. Please fill them out.",
                            "Validation Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                CreditCard card = new CreditCard(currentUser);
                card.setCardNumber(cardNumber);
                card.setExpirationDate(expiry);
                card.setSecurityCode(cvv);
                card.setCardholderName(name);

                currentUser.getCreditCards().add(card);

                cardListModel.addElement("Card: " + card.getFormattedCardNumber() +
                        " | Exp: " + card.getExpirationDate() +
                        " | CVV: " + card.getSecurityCode());

                JOptionPane.showMessageDialog(panel, "Credit card added successfully!");
            }
        });
        creditCardActionPanel.add(addManualCardButton);


        JButton deleteCardButton = new JButton("Delete Credit Card");
        deleteCardButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(panel, "Please login first");
                return;
            }

            int selectedIndex = cardList.getSelectedIndex();
            if (selectedIndex >= 0 && selectedIndex < currentUser.getCreditCards().size()) {
                int confirm = JOptionPane.showConfirmDialog(panel,
                        "Are you sure you want to delete this credit card?",
                        "Confirm Deletion", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    currentUser.getCreditCards().remove(selectedIndex);
                    cardListModel.remove(selectedIndex);
                    JOptionPane.showMessageDialog(panel, "Credit card removed successfully!");
                }
            } else {
                JOptionPane.showMessageDialog(panel, "Please select a credit card to delete");
            }
        });
        creditCardActionPanel.add(deleteCardButton);

        JButton refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> {
            if (currentUser != null) {
                usernameValue.setText(currentUser.getUsername());
                nameValue.setText(currentUser.getName() + " " + currentUser.getSurname());
                dbValue.setText(currentUser.getDateOfBirth());
                emailValue.setText(currentUser.getEmailAddress());
                homeAddressValue.setText(currentUser.getHomeAddress());
                workAddressValue.setText(currentUser.getWorkAddress());

                cardListModel.clear();
                for (CreditCard card : currentUser.getCreditCards()) {
                    cardListModel.addElement("Card Number: " + card.getFormattedCardNumber() +
                            " | Exp: " + card.getExpirationDate() +
                            " | CVV: " + card.getSecurityCode() +
                            " | Cardholder: " + card.getCardholderName());
                }
            } else {
                usernameValue.setText("Not logged in");
                nameValue.setText("");
                dbValue.setText("");
                emailValue.setText("");
                homeAddressValue.setText("");
                workAddressValue.setText("");
                cardListModel.clear();
            }
        });

        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.add(creditCardDisplayPanel, BorderLayout.CENTER);
        centerPanel.add(creditCardActionPanel, BorderLayout.SOUTH);

        panel.add(userInfoPanel, BorderLayout.NORTH);
        panel.add(centerPanel, BorderLayout.CENTER);
        panel.add(refreshButton, BorderLayout.SOUTH);

        return panel;
    }

    private JPanel createOrdersPanel() {
        JPanel panel = new JPanel(new BorderLayout());

        DefaultListModel<String> ordersListModel = new DefaultListModel<>();
        JList<String> ordersList = new JList<>(ordersListModel);
        JScrollPane scrollPane = new JScrollPane(ordersList);
        panel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonsPanel = new JPanel();

        JButton refreshButton = new JButton("Refresh Orders");
        refreshButton.addActionListener(e -> {
            ordersListModel.clear();
            if (currentUser != null) {
                for (Order order : completedOrders) {
                    if (order.getOrderingUser().equals(currentUser)) {
                        Product product = order.getOrderedProduct();
                        CreditCard card = order.getCreditCard();
                        ordersListModel.addElement(product.getProductName() +
                                " - Paid with card ending in " +
                                card.getCardNumber().substring(card.getCardNumber().length() - 4));
                    }
                }
            }
        });
        buttonsPanel.add(refreshButton);

        JButton cancelOrderButton = new JButton("Cancel Selected Order");
        cancelOrderButton.addActionListener(e -> {
            if (currentUser == null) {
                JOptionPane.showMessageDialog(panel, "Please login first");
                return;
            }

            int selectedIndex = ordersList.getSelectedIndex();

            ArrayList<Order> userOrders = new ArrayList<>();
            for (Order order : completedOrders) {
                if (order.getOrderingUser().equals(currentUser)) {
                    userOrders.add(order);
                }
            }

            if (selectedIndex >= 0 && selectedIndex < userOrders.size()) {
                int confirm = JOptionPane.showConfirmDialog(panel,
                        "Are you sure you want to cancel this order?",
                        "Confirm Cancellation", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    Order orderToCancel = userOrders.get(selectedIndex);

                    Product product = orderToCancel.getOrderedProduct();
                    product.setProductStockInformation(product.getProductStockInformation() + 1);

                    completedOrders.remove(orderToCancel);

                    ordersListModel.remove(selectedIndex);
                    JOptionPane.showMessageDialog(panel, "Order cancelled successfully");
                }
            } else {
                JOptionPane.showMessageDialog(panel, "Please select an order to cancel");
            }
        });
        buttonsPanel.add(cancelOrderButton);

        panel.add(buttonsPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(ShoppingAppUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShoppingAppUI().setVisible(true);
            }
        });
    }
}